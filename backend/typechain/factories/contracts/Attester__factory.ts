/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Attester, AttesterInterface } from "../../contracts/Attester";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IEAS",
        name: "eas",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidEAS",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "schema",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "string",
        name: "first_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "last_name",
        type: "string",
      },
    ],
    name: "attest",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516108b63803806108b683398181016040528101906100329190610147565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610098576040517f83780ffe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050610174565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610102826100d7565b9050919050565b6000610114826100f7565b9050919050565b61012481610109565b811461012f57600080fd5b50565b6000815190506101418161011b565b92915050565b60006020828403121561015d5761015c6100d2565b5b600061016b84828501610132565b91505092915050565b60805161072861018e6000396000606401526107286000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d7eb105f14610030575b600080fd5b61004a6004803603810190610045919061037f565b610060565b604051610057919061042d565b60405180910390f35b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f17325e760405180604001604052808881526020016040518060c001604052808973ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681526020016000151581526020016000801b8152602001888860405160200161010c9291906104c7565b604051602081830303815290604052815260200160008152508152506040518263ffffffff1660e01b8152600401610144919061068e565b6020604051808303816000875af1158015610163573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018791906106c5565b9050949350505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6101b8816101a5565b81146101c357600080fd5b50565b6000813590506101d5816101af565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610206826101db565b9050919050565b610216816101fb565b811461022157600080fd5b50565b6000813590506102338161020d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61028c82610243565b810181811067ffffffffffffffff821117156102ab576102aa610254565b5b80604052505050565b60006102be610191565b90506102ca8282610283565b919050565b600067ffffffffffffffff8211156102ea576102e9610254565b5b6102f382610243565b9050602081019050919050565b82818337600083830152505050565b600061032261031d846102cf565b6102b4565b90508281526020810184848401111561033e5761033d61023e565b5b610349848285610300565b509392505050565b600082601f83011261036657610365610239565b5b813561037684826020860161030f565b91505092915050565b600080600080608085870312156103995761039861019b565b5b60006103a7878288016101c6565b94505060206103b887828801610224565b935050604085013567ffffffffffffffff8111156103d9576103d86101a0565b5b6103e587828801610351565b925050606085013567ffffffffffffffff811115610406576104056101a0565b5b61041287828801610351565b91505092959194509250565b610427816101a5565b82525050565b6000602082019050610442600083018461041e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610482578082015181840152602081019050610467565b60008484015250505050565b600061049982610448565b6104a38185610453565b93506104b3818560208601610464565b6104bc81610243565b840191505092915050565b600060408201905081810360008301526104e1818561048e565b905081810360208301526104f5818461048e565b90509392505050565b610507816101a5565b82525050565b610516816101fb565b82525050565b600067ffffffffffffffff82169050919050565b6105398161051c565b82525050565b60008115159050919050565b6105548161053f565b82525050565b600081519050919050565b600082825260208201905092915050565b60006105818261055a565b61058b8185610565565b935061059b818560208601610464565b6105a481610243565b840191505092915050565b6000819050919050565b6105c2816105af565b82525050565b600060c0830160008301516105e0600086018261050d565b5060208301516105f36020860182610530565b506040830151610606604086018261054b565b50606083015161061960608601826104fe565b50608083015184820360808601526106318282610576565b91505060a083015161064660a08601826105b9565b508091505092915050565b600060408301600083015161066960008601826104fe565b506020830151848203602086015261068182826105c8565b9150508091505092915050565b600060208201905081810360008301526106a88184610651565b905092915050565b6000815190506106bf816101af565b92915050565b6000602082840312156106db576106da61019b565b5b60006106e9848285016106b0565b9150509291505056fea264697066735822122053c00abc35f435af7666247a178ea6cb6d7e51d4eaead76dc1e52e8af572a21b64736f6c63430008180033";

type AttesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attester__factory extends ContractFactory {
  constructor(...args: AttesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    eas: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(eas, overrides || {});
  }
  override deploy(
    eas: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(eas, overrides || {}) as Promise<
      Attester & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Attester__factory {
    return super.connect(runner) as Attester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttesterInterface {
    return new Interface(_abi) as AttesterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Attester {
    return new Contract(address, _abi, runner) as unknown as Attester;
  }
}
